// Copyright (c) 2021 Graphcore Ltd. All rights reserved.
#ifndef POPRITHMS_COMMON_SCHEDULABLE_GRAPHID_HPP
#define POPRITHMS_COMMON_SCHEDULABLE_GRAPHID_HPP

#include <vector>

#include <poprithms/util/typedinteger.hpp>
#include <poprithms/util/typedvector.hpp>

namespace poprithms {

namespace common {
namespace schedulable {

/// The Graph class controls the construction and generation of SubGraphIds.
class Graph;

/**
 * A class to identity distinct sub-graphs in a Graph. Sub-graphs can be any
 * partitioning of the Graph's Ops.
 * */
class SubGraphId {
public:
  /**
   * Generation of new SubGraphIds is controlled by the Graph class.
   * */
  SubGraphId() = delete;

  SubGraphId(const SubGraphId &) = default;
  SubGraphId(SubGraphId &&)      = default;

  SubGraphId &operator=(const SubGraphId &) = default;
  SubGraphId &operator=(SubGraphId &&) = default;

  /**
   * methods to return SugGraphId as different integer types.
   * */
  uint32_t get_u32() const { return val; }
  int64_t get_i64() const { return static_cast<int64_t>(val); }
  uint64_t get_u64() const { return static_cast<uint64_t>(val); }

  bool operator==(const SubGraphId &rhs) const { return val == rhs.val; }
  bool operator!=(const SubGraphId &rhs) const { return !operator==(rhs); }
  bool operator<(const SubGraphId &rhs) const { return val < rhs.val; }
  bool operator>(const SubGraphId &rhs) const { return val > rhs.val; }
  bool operator<=(const SubGraphId &rhs) const { return !operator>(rhs); }
  bool operator>=(const SubGraphId &rhs) const { return !operator<(rhs); }

  std::string str() const { return std::to_string(val); }

  /**
   * The only SubGraphId which can be generated by a user other than the Graph
   * class, is the 'unset' SubGraphId.
   * */
  static SubGraphId unset() { return {std::numeric_limits<uint32_t>::max()}; }
  bool isUnset() const { return *this == unset(); }

private:
  friend class Graph;
  SubGraphId(uint32_t v) : val(v) {}
  uint32_t val;
};

using SubGraphIds = std::vector<SubGraphId>;
std::ostream &operator<<(std::ostream &, const SubGraphIds &);
std::ostream &operator<<(std::ostream &, const SubGraphId &);

} // namespace schedulable
} // namespace common
} // namespace poprithms

namespace std {
template <> struct hash<poprithms::common::schedulable::SubGraphId> {
  std::size_t operator()(
      const poprithms::common::schedulable::SubGraphId &s) const noexcept {
    return std::hash<uint32_t>{}(s.get_u32());
  }
};
} // namespace std

#endif
